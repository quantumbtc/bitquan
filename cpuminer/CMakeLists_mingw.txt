cmake_minimum_required(VERSION 3.16)

project(cpuminer)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# MinGW specific settings
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)

# MinGW specific flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -O3 -march=native -mtune=native")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN32_WINNT=0x0601")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN32_IE=0x0800")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN32")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN64")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__USE_MINGW_ANSI_STDIO=1")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")

# Find required packages
find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)

# Find libcurl
find_package(CURL REQUIRED)

# Find JSON library - try multiple methods
find_package(nlohmann_json QUIET)
if(NOT nlohmann_json_FOUND)
    # Try to find nlohmann_json using pkg-config
    pkg_check_modules(NLOHMANN_JSON QUIET nlohmann_json)
    if(NLOHMANN_JSON_FOUND)
        message(STATUS "Found nlohmann_json via pkg-config")
        set(nlohmann_json_FOUND TRUE)
    else()
        # Try to find header-only version
        find_path(NLOHMANN_JSON_INCLUDE_DIR 
            NAMES nlohmann/json.hpp
            PATHS /usr/include /usr/local/include
        )
        if(NLOHMANN_JSON_INCLUDE_DIR)
            message(STATUS "Found nlohmann_json header-only version")
            set(nlohmann_json_FOUND TRUE)
            add_library(nlohmann_json INTERFACE)
            target_include_directories(nlohmann_json INTERFACE ${NLOHMANN_JSON_INCLUDE_DIR})
        else()
            message(FATAL_ERROR "nlohmann_json not found. Please install it using one of the following methods:
1. Ubuntu/Debian: sudo apt-get install nlohmann-json3-dev
2. CentOS/RHEL: sudo yum install nlohmann-json3-devel
3. Manual: Download from https://github.com/nlohmann/json/releases
4. vcpkg: vcpkg install nlohmann-json")
        endif()
    endif()
endif()

# Include directories
include_directories(${CMAKE_SOURCE_DIR}/../src)
include_directories(${CMAKE_SOURCE_DIR}/../src/crypto)
include_directories(${CMAKE_SOURCE_DIR}/../src/primitives)
include_directories(${CMAKE_SOURCE_DIR}/../src/util)

# Source files
set(SOURCES
    main.cpp
    miner.cpp
    rpc_client.cpp
    randomq_miner.cpp
    config.cpp
    # Crypto source files
    ${CMAKE_SOURCE_DIR}/../src/crypto/randomq.cpp
    ${CMAKE_SOURCE_DIR}/../src/crypto/randomq_mining.cpp
    ${CMAKE_SOURCE_DIR}/../src/crypto/sha256.cpp
)

# Create executable
add_executable(cpuminer ${SOURCES})

# Link libraries
target_link_libraries(cpuminer
    ${CURL_LIBRARIES}
    Threads::Threads
)

# Link JSON library based on how it was found
if(TARGET nlohmann_json)
    target_link_libraries(cpuminer nlohmann_json)
elseif(NLOHMANN_JSON_FOUND)
    target_link_libraries(cpuminer ${NLOHMANN_JSON_LIBRARIES})
    target_include_directories(cpuminer PRIVATE ${NLOHMANN_JSON_INCLUDE_DIRS})
    target_compile_options(cpuminer PRIVATE ${NLOHMANN_JSON_CFLAGS_OTHER})
endif()

# MinGW specific linking
target_link_libraries(cpuminer
    ws2_32
    winmm
    wldap32
    crypt32
    normaliz
    advapi32
    user32
    gdi32
    winspool
    shell32
    ole32
    oleaut32
    uuid
    comdlg32
    advapi32
)

# Compiler flags
target_compile_options(cpuminer PRIVATE
    -Wall
    -Wextra
    -O3
    -march=native
    -mtune=native
    -std=c++17
    -D_WIN32_WINNT=0x0601
    -D_WIN32_IE=0x0800
    -D_WIN32
    -D_WIN64
    -D__USE_MINGW_ANSI_STDIO=1
)

# Set output directory
set_target_properties(cpuminer PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)
